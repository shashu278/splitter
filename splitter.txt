<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Bill Splitter</title>
    <style>
        /* --- Global Styles & Fonts --- */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        :root {
            --primary-color: #10b981;
            --primary-dark: #059669;
            --secondary-color: #6c757d;
            --secondary-dark: #5a6268;
            --background-color: #f8f9fa;
            --card-bg: white;
            --text-dark: #212529;
            --text-light: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            background-image: linear-gradient(180deg, #f0fdf4 0%, var(--background-color) 30%);
            color: var(--text-dark);
            margin: 0;
            padding: 1rem;
        }

        /* --- Layout --- */
        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        /* --- Typography --- */
        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-dark);
            text-align: center;
        }
        h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #343a40;
            margin-top: 0;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        p {
            color: var(--text-light);
            text-align: center;
            margin-top: -0.5rem;
            margin-bottom: 2.5rem;
        }

        /* --- UI Components --- */
        .card {
            background-color: var(--card-bg);
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            border: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
            transition: box-shadow 0.3s ease;
        }
        .card:hover {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        }

        .input-field {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            box-sizing: border-box;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .input-field:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2);
        }
        
        .input-group {
            position: relative;
        }
        
        .input-group-text {
            position: absolute;
            top: 50%;
            left: 0.75rem;
            transform: translateY(-50%);
            color: var(--text-light);
        }
        
        .input-with-icon {
            padding-left: 2rem;
        }

        .button {
            width: 100%;
            padding: 0.85rem 1rem;
            font-size: 1rem;
            font-weight: 600;
            color: white;
            background-color: var(--primary-color);
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        .button:hover {
            background-color: var(--primary-dark);
        }
        .button:active {
            transform: translateY(1px);
        }
        
        .button-secondary {
            background-color: var(--secondary-color);
        }
        .button-secondary:hover {
            background-color: var(--secondary-dark);
        }

        .person-tag {
            background-color: #e9ecef;
            color: #495057;
            padding: 0.25rem 0.75rem;
            border-radius: 999px;
            font-size: 0.875rem;
        }
        
        .person-selector button {
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 999px;
            border: 1px solid var(--border-color);
            background-color: white;
            cursor: pointer;
            transition: all 0.2s;
        }
        .person-selector button:hover {
            background-color: #f8f9fa;
        }
        
        .person-selector button.selected {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* --- Utility Classes --- */
        .hidden { display: none; }
        .flex { display: flex; }
        .flex-wrap { flex-wrap: wrap; }
        .gap-2 { gap: 0.5rem; }
        .gap-4 { gap: 1rem; }
        .justify-between { justify-content: space-between; }
        .items-center { align-items: center; }
        .mt-4 { margin-top: 1rem; }
        .mb-4 { margin-bottom: 1rem; }
        .w-full { width: 100%; }
        .grid { display: grid; }
        .grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
        .text-sm { font-size: 0.875rem; }
        .text-gray { color: var(--text-light); }
        .font-mono { font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace; }
        
        /* --- Modal Styles --- */
        .modal-overlay {
            position: fixed;
            top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }
        .modal-content {
            background-color: white;
            padding: 1.5rem;
            border-radius: 0.75rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body>

    <div class="container">
        <header>
            <h1>Simple Bill Splitter</h1>
            <p>Save bills directly in your browser. No account needed.</p>
        </header>

        <main id="app">
            <!-- Housemate Setup View -->
            <div id="setup-view" class="card">
                <h2>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                    Who's in your house?
                </h2>
                <div id="housemate-inputs" class="grid grid-cols-2 gap-4 mb-4">
                    <!-- JS will generate 7 input fields here -->
                </div>
                <button id="save-housemates-btn" class="button">Save Housemates</button>
            </div>

            <!-- Bill Splitting View -->
            <div id="split-view" class="card hidden">
                <div class="flex justify-between items-center mb-4">
                     <h2>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                        Split a New Bill
                    </h2>
                    <button id="view-history-btn" class="button button-secondary" style="width: auto; padding: 0.5rem 1rem;">View History</button>
                </div>
                <div id="housemate-display" class="card" style="background-color: #f8f9fa;">
                    <h2 style="font-size: 1.2rem;">Your Housemates</h2>
                    <div id="housemate-tags" class="flex flex-wrap gap-2"></div>
                </div>
                <input type="text" id="bill-title" class="input-field mb-4" placeholder="Bill Title (e.g., Weekly Groceries)">
                <div id="items-container">
                    <!-- JS will generate item inputs here -->
                </div>
                <button id="add-item-btn" class="button button-secondary mt-4">Add Another Item</button>
                <hr style="margin: 1.5rem 0; border-top: 1px solid #e9ecef;">
                <div class="grid grid-cols-2 gap-4">
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" id="tax-input" class="input-field input-with-icon" placeholder="Tax">
                    </div>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" id="tip-input" class="input-field input-with-icon" placeholder="Tip">
                    </div>
                </div>
                <button id="calculate-btn" class="button mt-4">Calculate Totals</button>
            </div>

            <!-- Results View -->
            <div id="results-view" class="card hidden" style="background-color: #059669; color: white;">
                <h2 style="color: white;">Bill Successfully Split!</h2>
                <h3 id="result-title" style="text-align: center; margin-top: -0.5rem; color: #a7f3d0;"></h3>
                <div id="results-breakdown" class="flex" style="flex-direction: column; gap: 0.5rem;"></div>
                <hr style="margin: 1.5rem 0; border-color: #047857;">
                <div class="flex justify-between items-center">
                    <span style="font-weight: 700; font-size: 1.2rem;">Grand Total</span>
                    <span id="grand-total" style="font-weight: 700; font-size: 1.2rem;" class="font-mono"></span>
                </div>
                <div class="grid grid-cols-2 gap-4 mt-4">
                    <button id="start-new-btn" class="button" style="background-color: white; color: #059669;">Split New Bill</button>
                    <button id="view-history-from-results-btn" class="button button-secondary">View History</button>
                </div>
            </div>

            <!-- History View -->
            <div id="history-view" class="card hidden">
                <div class="flex justify-between items-center mb-4">
                    <h2>Past Bills</h2>
                    <button id="back-to-split-btn" class="button" style="width: auto; padding: 0.5rem 1rem;">New Split</button>
                </div>
                <div id="history-list"></div>
            </div>
        </main>
    </div>

    <!-- The Modal is no longer here. It will be created by JavaScript. -->

    <script>
        // --- DOM Element Selection ---
        const setupView = document.getElementById('setup-view');
        const splitView = document.getElementById('split-view');
        const resultsView = document.getElementById('results-view');
        const historyView = document.getElementById('history-view');

        const housemateInputsContainer = document.getElementById('housemate-inputs');
        const saveHousematesBtn = document.getElementById('save-housemates-btn');
        
        const housemateTagsContainer = document.getElementById('housemate-tags');
        const billTitleInput = document.getElementById('bill-title');
        const itemsContainer = document.getElementById('items-container');
        const addItemBtn = document.getElementById('add-item-btn');
        const taxInput = document.getElementById('tax-input');
        const tipInput = document.getElementById('tip-input');
        const calculateBtn = document.getElementById('calculate-btn');
        const viewHistoryBtn = document.getElementById('view-history-btn');
        
        const resultTitle = document.getElementById('result-title');
        const resultsBreakdown = document.getElementById('results-breakdown');
        const grandTotalEl = document.getElementById('grand-total');
        const startNewBtn = document.getElementById('start-new-btn');
        const viewHistoryFromResultsBtn = document.getElementById('view-history-from-results-btn');

        const historyList = document.getElementById('history-list');
        const backToSplitBtn = document.getElementById('back-to-split-btn');

        // --- App State ---
        let housemates = [];
        let billHistory = [];
        let currentResults = null;

        // --- Core Functions ---
        
        function navigate(view) {
            setupView.classList.add('hidden');
            splitView.classList.add('hidden');
            resultsView.classList.add('hidden');
            historyView.classList.add('hidden');
            document.getElementById(`${view}-view`).classList.remove('hidden');
        }

        function saveToLocalStorage() {
            localStorage.setItem('billSplitterHousemates', JSON.stringify(housemates));
            localStorage.setItem('billSplitterHistory', JSON.stringify(billHistory));
        }

        function loadFromLocalStorage() {
            const savedHousemates = localStorage.getItem('billSplitterHousemates');
            const savedHistory = localStorage.getItem('billSplitterHistory');
            
            if (savedHousemates) {
                housemates = JSON.parse(savedHousemates);
            }
            if (savedHistory) {
                billHistory = JSON.parse(savedHistory);
            }
        }

        // --- Rendering Functions ---
        
        function renderHousemateInputs() {
            housemateInputsContainer.innerHTML = '';
            for (let i = 0; i < 7; i++) {
                const input = document.createElement('input');
                input.type = 'text';
                input.placeholder = `Person ${i + 1}`;
                input.className = 'input-field';
                housemateInputsContainer.appendChild(input);
            }
        }
        
        function renderHousemateTags() {
            housemateTagsContainer.innerHTML = '';
            housemates.forEach(name => {
                const tag = document.createElement('span');
                tag.className = 'person-tag';
                tag.textContent = name;
                housemateTagsContainer.appendChild(tag);
            });
        }

        function createItemInput() {
            const itemId = `item-${Date.now()}-${Math.random()}`;
            const itemDiv = document.createElement('div');
            itemDiv.className = 'card mb-4';
            itemDiv.id = itemId;
            itemDiv.innerHTML = `
                <div class="grid grid-cols-2 gap-4">
                    <input type="text" class="input-field item-name" placeholder="Item Name">
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="input-field input-with-icon item-price" placeholder="0.00">
                    </div>
                </div>
                <div class="mt-4">
                    <div class="flex justify-between items-center mb-4">
                        <span class="text-sm text-gray">Assign to:</span>
                        <button class="text-sm" style="color: #059669; background: none; border: none; cursor: pointer; font-weight: 600;">Select All</button>
                    </div>
                    <div class="person-selector flex flex-wrap gap-2">
                        ${housemates.map(name => `<button data-name="${name}">${name}</button>`).join('')}
                    </div>
                </div>
                <button class="remove-item-btn" style="color: #dc3545; background: none; border: none; cursor: pointer; margin-top: 1rem; font-size: 0.8rem;">Remove Item</button>
            `;
            itemsContainer.appendChild(itemDiv);

            // Add event listeners for the new item
            const itemElement = document.getElementById(itemId);
            itemElement.querySelector('.person-selector').addEventListener('click', (e) => {
                if (e.target.tagName === 'BUTTON') {
                    e.target.classList.toggle('selected');
                }
            });
            itemElement.querySelector('.remove-item-btn').addEventListener('click', () => {
                if (itemsContainer.children.length > 1) {
                    itemElement.remove();
                }
            });
            itemElement.querySelector('button.text-sm').addEventListener('click', (e) => {
                const buttons = itemElement.querySelectorAll('.person-selector button');
                const allSelected = Array.from(buttons).every(b => b.classList.contains('selected'));
                buttons.forEach(b => {
                    if (allSelected) {
                        b.classList.remove('selected');
                    } else {
                        b.classList.add('selected');
                    }
                });
            });
        }
        
        function renderResults(bill) {
            currentResults = bill; // Store the current bill for the modal
            resultTitle.textContent = bill.title;
            grandTotalEl.textContent = `$${bill.grandTotal.toFixed(2)}`;
            resultsBreakdown.innerHTML = '';
            
            Object.entries(bill.totals).forEach(([name, amount]) => {
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center p-2 rounded';
                div.style.backgroundColor = '#047857';
                div.style.cursor = 'pointer';
                div.innerHTML = `
                    <span class="font-bold">${name}</span>
                    <span class="font-mono">${amount > 0 ? `$${amount.toFixed(2)}` : '$0.00'}</span>
                `;
                // Add event listener to show modal on click
                div.addEventListener('click', () => showPersonModal(name));
                resultsBreakdown.appendChild(div);
            });
        }
        
        function renderHistory() {
            historyList.innerHTML = '';
            if (billHistory.length === 0) {
                historyList.innerHTML = `<p style="text-align: center;">No saved bills yet.</p>`;
                return;
            }
            
            billHistory.forEach((bill) => {
                const div = document.createElement('div');
                div.className = 'card flex justify-between items-center';
                div.style.cursor = 'pointer';
                div.innerHTML = `
                    <div>
                        <div style="font-weight: 600;">${bill.title}</div>
                        <div class="text-sm text-gray">${new Date(bill.createdAt).toLocaleDateString()}</div>
                    </div>
                    <div class="font-mono" style="font-weight: 600; font-size: 1.1rem;">$${bill.grandTotal.toFixed(2)}</div>
                `;
                div.addEventListener('click', () => {
                    renderResults(bill);
                    navigate('results');
                });
                historyList.appendChild(div);
            });
        }

        function showPersonModal(name) {
            // Create modal elements dynamically
            const modalOverlay = document.createElement('div');
            modalOverlay.className = 'modal-overlay';

            const modalContent = document.createElement('div');
            modalContent.className = 'modal-content';

            const personBreakdown = currentResults.breakdown[name];
            let tableHTML = `<table style="width: 100%;">`;
            if (personBreakdown && personBreakdown.length > 0) {
                personBreakdown.forEach(item => {
                    tableHTML += `
                        <tr style="border-bottom: 1px solid #e9ecef;">
                            <td style="padding: 0.5rem 0;">${item.name}</td>
                            <td style="padding: 0.5rem 0; text-align: right;" class="font-mono">$${item.share.toFixed(2)}</td>
                        </tr>
                    `;
                });
            } else {
                tableHTML += `<tr><td style="padding: 0.5rem 0;">No items assigned.</td></tr>`;
            }
            tableHTML += `</table>`;

            modalContent.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h2>${name}'s Items</h2>
                    <button class="close-modal-btn" style="font-size: 1.5rem; background: none; border: none; cursor: pointer;">&times;</button>
                </div>
                <div>${tableHTML}</div>
            `;

            modalOverlay.appendChild(modalContent);
            document.body.appendChild(modalOverlay);

            // Add event listeners to close the new modal
            const closeModal = () => document.body.removeChild(modalOverlay);
            modalOverlay.querySelector('.close-modal-btn').addEventListener('click', closeModal);
            modalOverlay.addEventListener('click', (e) => {
                if (e.target === modalOverlay) {
                    closeModal();
                }
            });
        }

        // --- Event Listeners ---
        
        saveHousematesBtn.addEventListener('click', () => {
            const inputs = housemateInputsContainer.querySelectorAll('input');
            housemates = Array.from(inputs)
                .map(input => input.value.trim())
                .filter(name => name !== '');
            
            if (housemates.length < 2) {
                alert('Please enter at least two housemates.');
                return;
            }
            
            saveToLocalStorage();
            renderHousemateTags();
            itemsContainer.innerHTML = '';
            createItemInput();
            navigate('split');
        });

        addItemBtn.addEventListener('click', createItemInput);

        calculateBtn.addEventListener('click', () => {
            const items = [];
            const itemElements = itemsContainer.querySelectorAll('.card');
            
            itemElements.forEach(el => {
                const name = el.querySelector('.item-name').value.trim();
                const price = parseFloat(el.querySelector('.item-price').value);
                const assigned = Array.from(el.querySelectorAll('.person-selector button.selected'))
                    .map(btn => btn.dataset.name);
                
                if (name && price > 0 && assigned.length > 0) {
                    items.push({ name, price, assigned });
                }
            });
            
            if (items.length === 0) {
                alert('Please add at least one valid item with a name, price, and assigned people.');
                return;
            }
            
            const tax = parseFloat(taxInput.value) || 0;
            const tip = parseFloat(tipInput.value) || 0;
            
            // Calculation Logic
            const totals = {};
            const breakdown = {};
            const participants = new Set();
            housemates.forEach(h => { totals[h] = 0; breakdown[h] = []; });

            items.forEach(item => {
                const share = item.price / item.assigned.length;
                item.assigned.forEach(person => {
                    totals[person] += share;
                    breakdown[person].push({ name: item.name, share });
                    participants.add(person);
                });
            });

            const additionalCosts = tax + tip;
            if (additionalCosts > 0 && participants.size > 0) {
                const additionalShare = additionalCosts / participants.size;
                participants.forEach(person => {
                    totals[person] += additionalShare;
                    if (tax > 0) breakdown[person].push({ name: 'Tax', share: tax / participants.size });
                    if (tip > 0) breakdown[person].push({ name: 'Tip', share: tip / participants.size });
                });
            }

            const grandTotal = items.reduce((sum, item) => sum + item.price, 0) + additionalCosts;
            const title = billTitleInput.value.trim() || `Bill from ${new Date().toLocaleDateString()}`;

            const newBill = { title, totals, breakdown, grandTotal, createdAt: new Date() };
            
            billHistory.unshift(newBill);
            if (billHistory.length > 20) billHistory.pop();
            saveToLocalStorage();
            
            renderResults(newBill);
            navigate('results');
        });

        startNewBtn.addEventListener('click', () => {
            billTitleInput.value = '';
            taxInput.value = '';
            tipInput.value = '';
            itemsContainer.innerHTML = '';
            createItemInput();
            navigate('split');
        });

        viewHistoryBtn.addEventListener('click', () => {
            renderHistory();
            navigate('history');
        });
        
        viewHistoryFromResultsBtn.addEventListener('click', () => {
            renderHistory();
            navigate('history');
        });

        backToSplitBtn.addEventListener('click', () => navigate('split'));

        // --- App Initialization ---
        function init() {
            loadFromLocalStorage();
            if (housemates.length > 0) {
                renderHousemateTags();
                createItemInput();
                navigate('split');
            } else {
                renderHousemateInputs();
                navigate('setup');
            }
        }

        init();
    </script>
</body>
</html>
